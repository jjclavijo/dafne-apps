from typing import overload, List, Optional, Sized, Any
import _io # type: ignore
import collections.abc
import enum
import importlib._bootstrap # type: ignore
import io

## External
from pandas import DataFrame

DEFAULT_BUFFER_SIZE: int
NA: Any
Type_BINARY: int
Type_BOOL: int
Type_DATE32: int
Type_DATE64: int
Type_DECIMAL128: int
Type_DECIMAL256: int
Type_DENSE_UNION: int
Type_DICTIONARY: int
Type_DOUBLE: int
Type_DURATION: int
Type_FIXED_SIZE_BINARY: int
Type_FIXED_SIZE_LIST: int
Type_FLOAT: int
Type_HALF_FLOAT: int
Type_INT16: int
Type_INT32: int
Type_INT64: int
Type_INT8: int
Type_LARGE_BINARY: int
Type_LARGE_LIST: int
Type_LARGE_STRING: int
Type_LIST: int
Type_MAP: int
Type_NA: int
Type_SPARSE_UNION: int
Type_STRING: int
Type_STRUCT: int
Type_TIME32: int
Type_TIME64: int
Type_TIMESTAMP: int
Type_UINT16: int
Type_UINT32: int
Type_UINT64: int
Type_UINT8: int
UnionMode_DENSE: int
UnionMode_SPARSE: int
V1: Any
V2: Any
V3: Any
V4: Any
V5: Any
_HDFS_PATH_RE: Any
_NULL: Any
_default_context_initialized: bool
_default_serialization_context: Any
_is_path_like: Any
_pandas_api: Any
_python_extension_types_registry: Any
_registry_nanny: Any
_stringify_path: Any
cpp_build_info: Any
cpp_version: str
cpp_version_info: Any
namedtuple: Any

def __pyx_unpickle_SerializationContext(__pyx_type, long__pyx_checksum, __pyx_state) -> Any: ...
def __pyx_unpickle__PandasAPIShim(__pyx_type, long__pyx_checksum, __pyx_state) -> Any: ...
def __pyx_unpickle__PandasConvertible(__pyx_type, long__pyx_checksum, __pyx_state) -> Any: ...
def __pyx_unpickle___Pyx_EnumMeta(*args, **kwargs) -> Any: ...
def _datetime_from_int(int64_tvalue, TimeUnitunit, tzinfo = ...) -> Any: ...
def _deprecate_serialization(name) -> Any: ...
def _deserialize(obj, SerializationContextcontext = ...) -> Any: ...
def _detect_compression(path) -> Any: ...
def _empty_array(DataTypetype) -> Any: ...
def _get_default_context(*args, **kwargs) -> Any: ...
def _handle_arrow_array_protocol(obj, type, mask, size) -> Any: ...
def _is_primitive(Typetype) -> Any: ...
def _ndarray_to_arrow_type(values, DataTypetype) -> Any: ...
def _normalize_slice(arrow_obj, slicekey) -> Any: ...
def _pc(*args, **kwargs) -> Any: ...
def _read_serialized(source, base = ...) -> Any: ...
def _reconstruct_record_batch(columns, schema) -> Any: ...
def _reconstruct_table(arrays, schema) -> Any: ...
def _register_py_extension_type(*args, **kwargs) -> Any: ...
def _restore_array(data) -> Any: ...
def _serialize(value, SerializationContextcontext = ...) -> Any: ...
def _unregister_py_extension_types(*args, **kwargs) -> Any: ...
def allocate_buffer(int64_tsize, MemoryPoolmemory_pool = ..., resizable = ...) -> Any: ...
def array(obj, type = ..., mask = ..., size = ..., from_pandas = ..., boolsafe = ..., MemoryPoolmemory_pool = ...) -> Any: ...
def as_buffer(o) -> Any: ...
def asarray(values, type = ...) -> Any: ...
def benchmark_PandasObjectIsNull(listobj) -> Any: ...
def binary(intlength = ...) -> Any: ...
def bool_(*args, **kwargs) -> Any: ...
def chunked_array(arrays, type = ...) -> Any: ...
def compress(buf, codec = ..., asbytes = ..., memory_pool = ...) -> Any: ...
def concat_arrays(arrays, MemoryPoolmemory_pool = ...) -> Any: ...
def concat_tables(tables, boolpromote = ..., MemoryPoolmemory_pool = ...) -> Any: ...
def cpu_count(*args, **kwargs) -> Any: ...
def create_memory_map(path, size) -> Any: ...
def date32(*args, **kwargs) -> Any: ...
def date64(*args, **kwargs) -> Any: ...
def decimal128(intprecision, intscale = ...) -> DataType: ...
def decimal256(intprecision, intscale = ...) -> DataType: ...
def decompress(buf, decompressed_size = ..., codec = ..., asbytes = ..., memory_pool = ...) -> Any: ...
def default_memory_pool(*args, **kwargs) -> Any: ...
def deserialize(obj, SerializationContextcontext = ...) -> Any: ...
def deserialize_components(components, SerializationContextcontext = ...) -> Any: ...
def deserialize_from(source, base, SerializationContextcontext = ...) -> Any: ...
def dictionary(index_type, value_type, boolordered = ...) -> DictionaryType: ...
def duration(unit) -> Any: ...
def encode_file_path(path) -> Any: ...
def ensure_type(ty, boolallow_none = ...) -> DataType: ...
def field(name, type, boolnullable = ..., metadata = ...) -> Any: ...
def float16(*args, **kwargs) -> Any: ...
def float32(*args, **kwargs) -> Any: ...
def float64(*args, **kwargs) -> Any: ...
def foreign_buffer(address, size, base = ...) -> Any: ...
def from_numpy_dtype(dtype) -> Any: ...
def frombytes(*args, **kwargs) -> Any: ...
def get_record_batch_size(RecordBatchbatch) -> Any: ...
def get_tensor_size(Tensortensor) -> Any: ...
def have_libhdfs(*args, **kwargs) -> Any: ...
def infer_type(values, mask = ..., from_pandas = ...) -> Any: ...
def input_stream(source, compression = ..., buffer_size = ...) -> Any: ...
def int16(*args, **kwargs) -> Any: ...
def int32(*args, **kwargs) -> Any: ...
def int64(*args, **kwargs) -> Any: ...
def int8(*args, **kwargs) -> Any: ...
def is_boolean_value(obj) -> Any: ...
def is_float_value(obj) -> Any: ...
def is_integer_value(obj) -> Any: ...
def is_named_tuple(cls) -> Any: ...
def jemalloc_memory_pool(*args, **kwargs) -> Any: ...
def jemalloc_set_decay_ms(decay_ms) -> Any: ...
def large_binary(*args, **kwargs) -> Any: ...
def large_list(value_type) -> LargeListType: ...
def large_string(*args, **kwargs) -> Any: ...
def large_utf8(*args, **kwargs) -> Any: ...
def list_(value_type, intlist_size = ...) -> Any: ...
def log_memory_allocations(enable = ...) -> Any: ...
def logging_memory_pool(MemoryPoolparent) -> Any: ...
def map_(key_type, item_type, keys_sorted = ...) -> MapType: ...
def memory_map(path, mode = ...) -> Any: ...
def mimalloc_memory_pool(*args, **kwargs) -> Any: ...
def null(*args, **kwargs) -> Any: ...
def nulls(size, type = ..., MemoryPoolmemory_pool = ...) -> Any: ...
def output_stream(source, compression = ..., buffer_size = ...) -> Any: ...
def proxy_memory_pool(MemoryPoolparent) -> Any: ...
def py_buffer(obj) -> Any: ...
def read_message(source) -> Any: ...
def read_record_batch(obj, Schemaschema, DictionaryMemodictionary_memo = ...) -> Any: ...
def read_schema(obj, DictionaryMemodictionary_memo = ...) -> Any: ...
def read_serialized(source, base = ...) -> Any: ...
def read_tensor(source) -> Any: ...
def record_batch(data, names = ..., schema = ..., metadata = ...) -> Any: ...
def register_extension_type(ext_type) -> Any: ...
def repeat(value, size, MemoryPoolmemory_pool = ...) -> Any: ...
def scalar(*args, **kwargs) -> Any: ...
def schema(fields, metadata = ...) -> Any: ...
def serialize(value, SerializationContextcontext = ...) -> Any: ...
def serialize_to(value, sink, SerializationContextcontext = ...) -> Any: ...
def set_cpu_count(intcount) -> Any: ...
def set_memory_pool(MemoryPoolpool) -> Any: ...
def string(*args, **kwargs) -> Any: ...
def string_to_tzinfo(name) -> Any: ...
def strip_hdfs_abspath(path) -> Any: ...
def struct(fields) -> Any: ...
def system_memory_pool(*args, **kwargs) -> Any: ...
def table(data, names = ..., schema = ..., metadata = ..., nthreads = ...) -> Any: ...
def table_to_blocks(options, Tabletable, categories, extension_columns) -> Any: ...
def time32(unit) -> Any: ...
def time64(unit) -> Any: ...
def timestamp(unit, tz = ...) -> Any: ...
def tobytes(o) -> Any: ...
def total_allocated_bytes(*args, **kwargs) -> Any: ...
def transcoding_input_stream(stream, src_encoding, dest_encoding) -> Any: ...
def type_for_alias(name) -> Any: ...
def tzinfo_to_string(tz) -> Any: ...
def uint16(*args, **kwargs) -> Any: ...
def uint32(*args, **kwargs) -> Any: ...
def uint64(*args, **kwargs) -> Any: ...
def uint8(*args, **kwargs) -> Any: ...
def unify_schemas(listschemas) -> Any: ...
def union(children_fields, mode, type_codes = ...) -> Any: ...
def unregister_extension_type(type_name) -> Any: ...
def utf8(*args, **kwargs) -> Any: ...
def write_feather(Tabletable, dest, compression = ..., compression_level = ..., chunksize = ..., version = ...) -> Any: ...
def write_tensor(Tensortensor, NativeFiledest) -> Any: ...

class Array(_PandasConvertible):
    _name: Any = ...
    nbytes: Any = ...
    null_count: Any = ...
    offset: Any = ...
    type: Any = ...
    __hash__: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _debug_print(self) -> Any: ...
    def _export_to_c(self, uintptr_tout_ptr, uintptr_tout_schema_ptr = ...) -> Any: ...
    def _import_from_c(self, *args, **kwargs) -> Any: ...
    def _to_pandas(self, options, **kwargs) -> Any: ...
    def buffers(self) -> Any: ...
    def cast(self, target_type, safe = ...) -> Any: ...
    def dictionary_encode(self) -> Any: ...
    def diff(self, Arrayother) -> Any: ...
    def equals(self, Arrayother) -> Any: ...
    def fill_null(self, fill_value) -> Any: ...
    def filter(self, Arraymask, null_selection_behavior = ...) -> Any: ...
    def format(self, **kwargs) -> Any: ...
    def from_buffers(self, *args, **kwargs) -> Any: ...
    def from_pandas(self, *args, **kwargs) -> Any: ...
    def is_null(self) -> Any: ...
    def is_valid(self) -> Any: ...
    def slice(self, offset = ..., length = ...) -> Any: ...
    def sum(self) -> Any: ...
    def take(self, indices) -> Any: ...
    def to_numpy(self, **kwargs) -> Any: ...
    def to_pylist(self) -> Any: ...
    def to_string(self, intindent = ..., intwindow = ...) -> Any: ...
    def tolist(self) -> Any: ...
    def unique(self) -> Any: ...
    def validate(self, *args, **kwargs) -> Any: ...
    def value_counts(self) -> Any: ...
    def view(self, target_type) -> Any: ...
    def __array__(self, dtype = ...) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> int: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __sizeof__(self) -> Any: ...

class ArrowCapacityError(ArrowException): ...

class ArrowException(Exception): ...

class ArrowIOError(Exception):
    characters_written: Any = ...
    errno: Any = ...
    filename: Any = ...
    filename2: Any = ...
    strerror: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class ArrowIndexError(IndexError, ArrowException): ...

class ArrowInvalid(ValueError, ArrowException): ...

class ArrowKeyError(KeyError, ArrowException): ...

class ArrowMemoryError(MemoryError, ArrowException): ...

class ArrowNotImplementedError(NotImplementedError, ArrowException): ...

class ArrowSerializationError(ArrowException): ...

class ArrowTypeError(TypeError, ArrowException): ...

class BaseExtensionType(DataType):
    extension_name: Any = ...
    storage_type: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class BaseListArray(Array):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def flatten(self) -> Any: ...
    def value_lengths(self) -> Any: ...
    def value_parent_indices(self) -> Any: ...

class BinaryArray(Array):
    total_values_length: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class BinaryScalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_buffer(self) -> Any: ...
    def as_py(self) -> Any: ...

class BooleanArray(Array):
    false_count: Any = ...
    true_count: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class BooleanScalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class Buffer(_Weakrefable):
    address: Any = ...
    is_cpu: Any = ...
    is_mutable: Any = ...
    parent: Any = ...
    size: Any = ...
    __hash__: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def equals(self, Bufferother) -> Any: ...
    def hex(self) -> Any: ...
    def slice(self, offset = ..., length = ...) -> Any: ...
    def to_pybytes(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce_ex__(self, protocol) -> Any: ...

class BufferOutputStream(NativeFile):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def getvalue(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BufferReader(NativeFile):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BufferedIOBase(_io._BufferedIOBase, io.IOBase):
    _abc_impl: Any = ...
    __abstractmethods__: Any = ...

class BufferedInputStream(NativeFile):
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def detach(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BufferedOutputStream(NativeFile):
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def detach(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BuildInfo(tuple):
    _asdict: Any = ...
    _field_defaults: Any = ...
    _fields: Any = ...
    _replace: Any = ...
    compiler_flags: Any = ...
    compiler_id: Any = ...
    compiler_version: Any = ...
    full_so_version: Any = ...
    git_description: Any = ...
    git_id: Any = ...
    package_kind: Any = ...
    so_version: Any = ...
    version: Any = ...
    version_info: Any = ...
    __getnewargs__: Any = ...
    __slots__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(self, *args, **kwargs) -> Any: ...

class ChunkedArray(_PandasConvertible):
    _name: Any = ...
    chunks: Any = ...
    data: Any = ...
    nbytes: Any = ...
    null_count: Any = ...
    num_chunks: Any = ...
    type: Any = ...
    __hash__: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _to_pandas(self, options, **kwargs) -> Any: ...
    def cast(self, target_type, safe = ...) -> Any: ...
    def chunk(self, i) -> Any: ...
    def combine_chunks(self, MemoryPoolmemory_pool = ...) -> Any: ...
    def dictionary_encode(self) -> Any: ...
    def equals(self, ChunkedArrayother) -> Any: ...
    def fill_null(self, fill_value) -> Any: ...
    def filter(self, mask, null_selection_behavior = ...) -> Any: ...
    def flatten(self, MemoryPoolmemory_pool = ...) -> Any: ...
    def format(self, **kwargs) -> Any: ...
    def is_null(self) -> Any: ...
    def is_valid(self) -> Any: ...
    def iterchunks(self) -> Any: ...
    def length(self) -> Any: ...
    def slice(self, offset = ..., length = ...) -> Any: ...
    def take(self, indices) -> Any: ...
    def to_numpy(self) -> Any: ...
    def to_pylist(self) -> Any: ...
    def to_string(self, intindent = ..., intwindow = ...) -> Any: ...
    def unique(self) -> Any: ...
    def validate(self, *args, **kwargs) -> Any: ...
    def value_counts(self) -> Any: ...
    def __array__(self, dtype = ...) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __sizeof__(self) -> Any: ...

class Codec(_Weakrefable):
    name: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def compress(self, buf, asbytes = ..., memory_pool = ...) -> Any: ...
    def decompress(self, buf, decompressed_size = ..., asbytes = ..., memory_pool = ...) -> Any: ...
    def detect(self, *args, **kwargs) -> Any: ...
    def is_available(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CompressedInputStream(NativeFile):
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CompressedOutputStream(NativeFile):
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class DataType(_Weakrefable):
    bit_width: Any = ...
    id: Any = ...
    num_buffers: Any = ...
    num_children: Any = ...
    num_fields: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _export_to_c(self, uintptr_tout_ptr) -> Any: ...
    def _import_from_c(self, *args, **kwargs) -> Any: ...
    def equals(self, other) -> Any: ...
    def to_pandas_dtype(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...

class Date32Array(NumericArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class Date32Scalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class Date64Array(NumericArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class Date64Scalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class Decimal128Array(FixedSizeBinaryArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class Decimal128Scalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class Decimal128Type(FixedSizeBinaryType):
    precision: Any = ...
    scale: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class Decimal256Array(FixedSizeBinaryArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class Decimal256Scalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class Decimal256Type(FixedSizeBinaryType):
    precision: Any = ...
    scale: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class DeserializationCallbackError(ArrowSerializationError):
    def __init__(self, message, type_id) -> None: ...

class DictionaryArray(Array):
    dictionary: Any = ...
    indices: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def dictionary_encode(self) -> Any: ...
    def from_arrays(self, *args, **kwargs) -> Any: ...

class DictionaryMemo(_Weakrefable):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class DictionaryScalar(Scalar):
    dictionary: Any = ...
    dictionary_value: Any = ...
    index: Any = ...
    index_value: Any = ...
    value: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _reconstruct(typecls, type, is_valid, index, dictionary) -> Any: ...
    def as_py(self) -> Any: ...
    def __reduce__(self) -> Any: ...

class DictionaryType(DataType):
    index_type: Any = ...
    ordered: Any = ...
    value_type: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class DoubleArray(FloatingPointArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class DoubleScalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class DurationArray(NumericArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class DurationScalar(Scalar):
    value: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class DurationType(DataType):
    unit: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class ExtensionArray(Array):
    storage: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _to_pandas(self, options, **kwargs) -> Any: ...
    def from_storage(self, *args, **kwargs) -> Any: ...
    def to_numpy(self, **kwargs) -> Any: ...

class ExtensionType(BaseExtensionType):
    __hash__: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __arrow_ext_class__(self) -> Any: ...
    @classmethod
    def __arrow_ext_deserialize__(typeself, storage_type, serialized) -> Any: ...
    def __arrow_ext_serialize__(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class FeatherError(Exception): ...

class FeatherReader(_Weakrefable):
    version: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def open(self, source, booluse_memory_map = ...) -> Any: ...
    def read(self) -> Any: ...
    def read_indices(self, indices) -> Any: ...
    def read_names(self, names) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Field(_Weakrefable):
    metadata: Any = ...
    name: Any = ...
    nullable: Any = ...
    type: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def add_metadata(self, metadata) -> Any: ...
    def equals(self, Fieldother, boolcheck_metadata = ...) -> Any: ...
    def flatten(self) -> Any: ...
    def remove_metadata(self) -> Any: ...
    def with_metadata(self, metadata) -> Any: ...
    def with_name(self, name) -> Any: ...
    def with_nullable(self, nullable) -> Any: ...
    def with_type(self, DataTypenew_type) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...

class FixedSizeBinaryArray(Array):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class FixedSizeBinaryScalar(BinaryScalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class FixedSizeBinaryType(DataType):
    byte_width: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class FixedSizeBufferWriter(NativeFile):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def set_memcopy_blocksize(self, int64_tblocksize) -> Any: ...
    def set_memcopy_threads(self, intnum_threads) -> Any: ...
    def set_memcopy_threshold(self, int64_tthreshold) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class FixedSizeListArray(Array):
    values: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def flatten(self) -> Any: ...
    def from_arrays(self, *args, **kwargs) -> Any: ...

class FixedSizeListScalar(ListScalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class FixedSizeListType(DataType):
    list_size: Any = ...
    value_field: Any = ...
    value_type: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class FloatArray(FloatingPointArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class FloatScalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class FloatingPointArray(NumericArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class HadoopFileSystem(_Weakrefable):
    extra_conf: Any = ...
    host: Any = ...
    is_open: Any = ...
    kerb_ticket: Any = ...
    port: Any = ...
    user: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _connect(self, host, port, user, kerb_ticket, extra_conf) -> Any: ...
    def chmod(self, path, mode) -> Any: ...
    def chown(self, path, owner = ..., group = ...) -> Any: ...
    def close(self) -> Any: ...
    @classmethod
    def connect(typecls, *args, **kwargs) -> Any: ...
    def delete(self, path, boolrecursive = ...) -> Any: ...
    def df(self) -> Any: ...
    def download(self, path, stream, buffer_size = ...) -> Any: ...
    def exists(self, path) -> Any: ...
    def get_capacity(self) -> Any: ...
    def get_space_used(self) -> Any: ...
    def info(self, path) -> Any: ...
    def isdir(self, path) -> Any: ...
    def isfile(self, path) -> Any: ...
    def ls(self, path, boolfull_info) -> Any: ...
    def mkdir(self, path) -> Any: ...
    def open(self, path, mode = ..., buffer_size = ..., replication = ..., default_block_size = ...) -> Any: ...
    def rename(self, path, new_path) -> Any: ...
    def stat(self, path) -> Any: ...
    def upload(self, path, stream, buffer_size = ...) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class HalfFloatArray(FloatingPointArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class HalfFloatScalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class HdfsFile(NativeFile):
    buffer_size: Any = ...
    mode: Any = ...
    parent: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class IOBase(_io._IOBase):
    _abc_impl: Any = ...
    __abstractmethods__: Any = ...

class Int16Array(IntegerArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class Int16Scalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class Int32Array(IntegerArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class Int32Scalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class Int64Array(IntegerArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class Int64Scalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class Int8Array(IntegerArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class Int8Scalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class IntegerArray(NumericArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class IpcWriteOptions(_Weakrefable):
    compression: Any = ...
    emit_dictionary_deltas: Any = ...
    metadata_version: Any = ...
    use_legacy_format: Any = ...
    use_threads: Any = ...
    __slots__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class KeyValueMetadata(_Metadata, collections.abc.Mapping):
    __hash__: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def equals(self, KeyValueMetadataother) -> Any: ...
    def get_all(self, key) -> Any: ...
    def items(self) -> Any: ...
    def key(self, i) -> Any: ...
    def keys(self) -> Any: ...
    def to_dict(self) -> Any: ...
    def value(self, i) -> Any: ...
    def values(self) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...

class LargeBinaryArray(Array):
    total_values_length: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class LargeBinaryScalar(BinaryScalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class LargeListArray(BaseListArray):
    offsets: Any = ...
    values: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def from_arrays(self, *args, **kwargs) -> Any: ...

class LargeListScalar(ListScalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class LargeListType(DataType):
    value_field: Any = ...
    value_type: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class LargeStringArray(Array):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def from_buffers(self, *args, **kwargs) -> Any: ...

class LargeStringScalar(StringScalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class ListArray(BaseListArray):
    offsets: Any = ...
    values: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def from_arrays(self, *args, **kwargs) -> Any: ...

class ListScalar(Scalar):
    values: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> Any: ...

class ListType(DataType):
    value_field: Any = ...
    value_type: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

class LoggingMemoryPool(MemoryPool):
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class MapArray(Array):
    items: Any = ...
    keys: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def from_arrays(self, *args, **kwargs) -> Any: ...

class MapScalar(ListScalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Any: ...

class MapType(DataType):
    item_type: Any = ...
    key_type: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...

"""
class Mapping(collections.abc.Collection):
    _abc_impl: Any = ...
    get: Any = ...
    items: Any = ...
    keys: Any = ...
    values: Any = ...
    __abstractmethods__: Any = ...
    __contains__: Any = ...
    __eq__: Any = ...
    __getitem__: Any = ...
    __hash__: Any = ...
    __reversed__: Any = ...
    __slots__: Any = ...
"""

class MemoryMappedFile(NativeFile):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _open(self, path, mode = ...) -> Any: ...
    def create(self, *args, **kwargs) -> Any: ...
    def fileno(self) -> Any: ...
    def resize(self, new_size) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class MemoryPool(_Weakrefable):
    backend_name: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def bytes_allocated(self) -> Any: ...
    def max_memory(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Message(_Weakrefable):
    body: Any = ...
    metadata: Any = ...
    metadata_version: Any = ...
    type: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def equals(self, Messageother) -> Any: ...
    def serialize(self, alignment = ..., memory_pool = ...) -> Any: ...
    def serialize_to(self, NativeFilesink, alignment = ..., memory_pool = ...) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class MessageReader(_Weakrefable):
    def __init__(self, *args, **kwargs) -> None: ...
    def open_stream(self, *args, **kwargs) -> Any: ...
    def read_next_message(self) -> Any: ...
    def __iter__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class MetadataVersion(enum.IntEnum):
    __new__: Any = ...
    V1: Any = ...
    V2: Any = ...
    V3: Any = ...
    V4: Any = ...
    V5: Any = ...
    _generate_next_value_: Any = ...
    _member_map_: Any = ...
    _member_names_: Any = ...
    _member_type_: Any = ...
    _value2member_map_: Any = ...

class MockOutputStream(NativeFile):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def size(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class NativeFile(_Weakrefable):
    closed: Any = ...
    mode: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _assert_open(self) -> Any: ...
    def _assert_readable(self) -> Any: ...
    def _assert_seekable(self) -> Any: ...
    def _assert_writable(self) -> Any: ...
    def close(self) -> Any: ...
    def download(self, stream_or_path, buffer_size = ...) -> Any: ...
    def fileno(self) -> Any: ...
    def flush(self) -> Any: ...
    def isatty(self) -> Any: ...
    def read(self, nbytes = ...) -> Any: ...
    def read1(self, nbytes = ...) -> Any: ...
    def read_at(self, nbytes, offset) -> Any: ...
    def read_buffer(self, nbytes = ...) -> Any: ...
    def readable(self) -> Any: ...
    def readall(self) -> Any: ...
    def readinto(self, b) -> Any: ...
    def readline(self, size = ...) -> Any: ...
    def readlines(self, hint = ...) -> Any: ...
    def seek(self, int64_tposition, intwhence = ...) -> Any: ...
    def seekable(self) -> Any: ...
    def size(self) -> Any: ...
    def tell(self) -> Any: ...
    def truncate(self) -> Any: ...
    def upload(self, stream, buffer_size = ...) -> Any: ...
    def writable(self) -> Any: ...
    def write(self, data) -> Any: ...
    def writelines(self, lines) -> Any: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, exc_type, exc_value, tb) -> Any: ...
    def __iter__(self) -> Any: ...
    def __next__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class NullArray(Array):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class NullScalar(Scalar):
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class NumericArray(Array):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class OSFile(NativeFile):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def fileno(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ProxyMemoryPool(MemoryPool):
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PyExtensionType(ExtensionType):
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def __arrow_ext_deserialize__(typecls, storage_type, serialized) -> Any: ...
    def __arrow_ext_serialize__(self) -> Any: ...
    def __reduce__(self) -> Any: ...

class PythonFile(NativeFile):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def readline(self, size = ...) -> Any: ...
    def readlines(self, hint = ...) -> Any: ...
    def truncate(self, pos = ...) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Queue:
    __init__: Any = ...
    _get: Any = ...
    _init: Any = ...
    _put: Any = ...
    _qsize: Any = ...
    empty: Any = ...
    full: Any = ...
    get: Any = ...
    get_nowait: Any = ...
    join: Any = ...
    put: Any = ...
    put_nowait: Any = ...
    qsize: Any = ...
    task_done: Any = ...
    @classmethod
    def __class_getitem__(self, *args, **kwargs) -> Any: ...

class QueueEmpty(Exception): ...

class QueueFull(Exception): ...

class ReadStats(importlib._bootstrap.ReadStats):
    __slots__: Any = ...

class RecordBatch(_PandasConvertible):
    columns: List[Array] = ...
    nbytes: int = ...
    num_columns: int = ...
    num_rows: int = ...
    schema: Schema = ...
    __hash__: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _column(self, inti) -> Any: ...
    def _ensure_integer_index(self, i) -> Any: ...
    def _export_to_c(self, uintptr_tout_ptr, uintptr_tout_schema_ptr = ...) -> Any: ...
    def _import_from_c(self, *args, **kwargs) -> Any: ...
    def _to_pandas(self, options, **kwargs) -> DataFrame: ...
    def column(self, i) -> Any: ...
    def equals(self, other, boolcheck_metadata = ...) -> Any: ...
    def field(self, i) -> Any: ...
    def filter(self, Arraymask, null_selection_behavior = ...) -> Any: ...
    @staticmethod
    def from_arrays(arrays: List[Sized], names: Optional[List[str]]=..., schema: Optional[Schema]=..., metadata=... ) -> RecordBatch: ...
    @classmethod
    def from_pandas(typecls, df, Schemaschema = ..., preserve_index = ..., nthreads = ..., columns = ...) -> RecordBatch: ...
    def from_struct_array(self, *args, **kwargs) -> RecordBatch: ...
    def replace_schema_metadata(self, metadata = ...) -> Any: ...
    def serialize(self, memory_pool = ...) -> Any: ...
    def slice(self, offset = ..., length = ...) -> Any: ...
    def take(self, indices) -> Any: ...
    def to_pydict(self) -> Any: ...
    def to_string(self, show_metadata = ...) -> Any: ...
    def validate(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> bool: ...
    def __ge__(self, other) -> bool: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> bool: ...
    def __le__(self, other) -> bool: ...
    def __len__(self) -> int: ...
    def __lt__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __reduce__(self) -> Any: ...
    def __sizeof__(self) -> int: ...

class RecordBatchReader(_Weakrefable):
    schema: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _export_to_c(self, uintptr_tout_ptr) -> Any: ...
    def _import_from_c(self, *args, **kwargs) -> Any: ...
    def from_batches(self, *args, **kwargs) -> Any: ...
    def get_next_batch(self) -> Any: ...
    def read_all(self) -> Any: ...
    def read_next_batch(self) -> Any: ...
    def read_pandas(self, **options) -> Any: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> Any: ...
    def __iter__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ResizableBuffer(Buffer):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def resize(self, int64_tnew_size, shrink_to_fit = ...) -> Any: ...

class Scalar(_Weakrefable):
    is_valid: Any = ...
    type: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...
    def cast(self, target_type) -> Any: ...
    def equals(self, Scalarother) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...

class Schema(_Weakrefable):
    metadata: Any = ...
    names: List[str] = ...
    pandas_metadata: Any = ...
    types: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _export_to_c(self, uintptr_tout_ptr) -> Any: ...
    def _field(self, inti) -> Any: ...
    def _import_from_c(self, *args, **kwargs) -> Any: ...
    def add_metadata(self, metadata) -> Any: ...
    def append(self, Fieldfield) -> Any: ...
    def empty_table(self) -> Any: ...
    def equals(self, Schemaother, boolcheck_metadata = ...) -> Any: ...
    def field(self, i) -> Any: ...
    def field_by_name(self, name) -> Any: ...
    @classmethod
    @overload
    def from_pandas(typecls, df, preserve_index = ...) -> Any: ...
    @classmethod
    @overload
    def from_pandas(df) -> Any: ...
    def get_all_field_indices(self, name) -> Any: ...
    def get_field_index(self, name) -> Any: ...
    def insert(self, inti, Fieldfield) -> Any: ...
    def remove(self, inti) -> Any: ...
    def remove_metadata(self) -> Any: ...
    def serialize(self, memory_pool = ...) -> Any: ...
    def set(self, inti, Fieldfield) -> Any: ...
    def to_string(self, truncate_metadata = ..., show_field_metadata = ..., show_schema_metadata = ...) -> Any: ...
    def with_metadata(self, metadata) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __sizeof__(self) -> Any: ...

class SerializationCallbackError(ArrowSerializationError):
    def __init__(self, message, example_object) -> None: ...

class SerializationContext(_Weakrefable):
    def __init__(self, *args, **kwargs) -> None: ...
    def _deserialize_callback(self, serialized_obj) -> Any: ...
    def _serialize_callback(self, obj) -> Any: ...
    def clone(self) -> Any: ...
    def deserialize(self, what) -> Any: ...
    def deserialize_components(self, what) -> Any: ...
    def register_type(self, type_, type_id, pickle = ..., custom_serializer = ..., custom_deserializer = ...) -> Any: ...
    def serialize(self, obj) -> Any: ...
    def serialize_to(self, value, sink) -> Any: ...
    def set_pickle(self, serializer, deserializer) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SerializedPyObject(_Weakrefable):
    base: Any = ...
    total_bytes: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def deserialize(self, SerializationContextcontext = ...) -> Any: ...
    def from_components(self, *args, **kwargs) -> Any: ...
    def to_buffer(self, nthreads = ...) -> Any: ...
    def to_components(self, memory_pool = ...) -> Any: ...
    def write_to(self, sink) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SparseCOOTensor(_Weakrefable):
    dim_names: Any = ...
    has_canonical_format: Any = ...
    is_mutable: Any = ...
    ndim: Any = ...
    non_zero_length: Any = ...
    shape: Any = ...
    size: Any = ...
    type: Any = ...
    __hash__: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def dim_name(self, i) -> Any: ...
    def equals(self, SparseCOOTensorother) -> Any: ...
    @classmethod
    def from_dense_numpy(typecls, obj, dim_names = ...) -> Any: ...
    def from_numpy(self, *args, **kwargs) -> Any: ...
    def from_pydata_sparse(self, *args, **kwargs) -> Any: ...
    def from_scipy(self, *args, **kwargs) -> Any: ...
    def from_tensor(self, *args, **kwargs) -> Any: ...
    def to_numpy(self) -> Any: ...
    def to_pydata_sparse(self) -> Any: ...
    def to_scipy(self) -> Any: ...
    def to_tensor(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SparseCSCMatrix(_Weakrefable):
    dim_names: Any = ...
    is_mutable: Any = ...
    ndim: Any = ...
    non_zero_length: Any = ...
    shape: Any = ...
    size: Any = ...
    type: Any = ...
    __hash__: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def dim_name(self, i) -> Any: ...
    def equals(self, SparseCSCMatrixother) -> Any: ...
    @classmethod
    def from_dense_numpy(typecls, obj, dim_names = ...) -> Any: ...
    def from_numpy(self, *args, **kwargs) -> Any: ...
    def from_scipy(self, *args, **kwargs) -> Any: ...
    def from_tensor(self, *args, **kwargs) -> Any: ...
    def to_numpy(self) -> Any: ...
    def to_scipy(self) -> Any: ...
    def to_tensor(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SparseCSFTensor(_Weakrefable):
    dim_names: Any = ...
    is_mutable: Any = ...
    ndim: Any = ...
    non_zero_length: Any = ...
    shape: Any = ...
    size: Any = ...
    type: Any = ...
    __hash__: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def dim_name(self, i) -> Any: ...
    def equals(self, SparseCSFTensorother) -> Any: ...
    @classmethod
    def from_dense_numpy(typecls, obj, dim_names = ...) -> Any: ...
    def from_numpy(self, *args, **kwargs) -> Any: ...
    def from_tensor(self, *args, **kwargs) -> Any: ...
    def to_numpy(self) -> Any: ...
    def to_tensor(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SparseCSRMatrix(_Weakrefable):
    dim_names: Any = ...
    is_mutable: Any = ...
    ndim: Any = ...
    non_zero_length: Any = ...
    shape: Any = ...
    size: Any = ...
    type: Any = ...
    __hash__: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def dim_name(self, i) -> Any: ...
    def equals(self, SparseCSRMatrixother) -> Any: ...
    @classmethod
    def from_dense_numpy(typecls, obj, dim_names = ...) -> Any: ...
    def from_numpy(self, *args, **kwargs) -> Any: ...
    def from_scipy(self, *args, **kwargs) -> Any: ...
    def from_tensor(self, *args, **kwargs) -> Any: ...
    def to_numpy(self) -> Any: ...
    def to_scipy(self) -> Any: ...
    def to_tensor(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class StringArray(Array):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def from_buffers(self, *args, **kwargs) -> Any: ...

class StringBuilder(_Weakrefable):
    null_count: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def append(self, value) -> Any: ...
    def append_values(self, values) -> Any: ...
    def finish(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class StringScalar(BinaryScalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class StructArray(Array):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def field(self, index) -> Any: ...
    def flatten(self, MemoryPoolmemory_pool = ...) -> Any: ...
    def from_arrays(self, *args, **kwargs) -> Any: ...

class StructScalar(Scalar, collections.abc.Mapping):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> Any: ...

class StructType(DataType):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def get_all_field_indices(self, name) -> Any: ...
    def get_field_index(self, name) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...

class Table(_PandasConvertible):
    column_names: Any = ...
    columns: Any = ...
    nbytes: Any = ...
    num_columns: Any = ...
    num_rows: Any = ...
    schema: Any = ...
    shape: Any = ...
    __hash__: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _column(self, inti) -> Any: ...
    def _ensure_integer_index(self, i) -> Any: ...
    def _to_pandas(self, options, categories = ..., ignore_metadata = ..., types_mapper = ...) -> Any: ...
    def add_column(self, inti, field_, column) -> Any: ...
    def append_column(self, field_, column) -> Any: ...
    def cast(self, Schematarget_schema, boolsafe = ...) -> Any: ...
    def column(self, i) -> Any: ...
    def combine_chunks(self, MemoryPoolmemory_pool = ...) -> Any: ...
    def drop(self, columns) -> Any: ...
    def equals(self, Tableother, boolcheck_metadata = ...) -> Any: ...
    def field(self, i) -> Any: ...
    def filter(self, mask, null_selection_behavior = ...) -> Any: ...
    def flatten(self, MemoryPoolmemory_pool = ...) -> Any: ...
    def from_arrays(self, *args, **kwargs) -> Any: ...
    def from_batches(self, *args, **kwargs) -> Any: ...
    @classmethod
    @overload
    def from_pandas(typecls, df, Schemaschema = ..., preserve_index = ..., nthreads = ..., columns = ..., boolsafe = ...) -> Any: ...
    @classmethod
    @overload
    def from_pandas(df) -> Any: ...
    def from_pydict(self, *args, **kwargs) -> Any: ...
    def itercolumns(self) -> Any: ...
    def remove_column(self, inti) -> Any: ...
    def rename_columns(self, names) -> Any: ...
    def replace_schema_metadata(self, metadata = ...) -> Any: ...
    def select(self, columns) -> Any: ...
    def set_column(self, inti, field_, column) -> Any: ...
    def slice(self, offset = ..., length = ...) -> Any: ...
    def take(self, indices) -> Any: ...
    def to_batches(self, max_chunksize = ..., **kwargs) -> Any: ...
    def to_pydict(self) -> Any: ...
    def to_string(self, show_metadata = ...) -> Any: ...
    def validate(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __sizeof__(self) -> Any: ...

class Tensor(_Weakrefable):
    dim_names: Any = ...
    is_contiguous: Any = ...
    is_mutable: Any = ...
    ndim: Any = ...
    shape: Any = ...
    size: Any = ...
    strides: Any = ...
    type: Any = ...
    __hash__: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def dim_name(self, i) -> Any: ...
    def equals(self, Tensorother) -> Any: ...
    def from_numpy(self, *args, **kwargs) -> Any: ...
    def to_numpy(self) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class TextIOBase(_io._TextIOBase, io.IOBase):
    _abc_impl: Any = ...
    __abstractmethods__: Any = ...

class Time32Array(NumericArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class Time32Scalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class Time32Type(DataType):
    unit: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class Time64Array(NumericArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class Time64Scalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class Time64Type(DataType):
    unit: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class TimestampArray(NumericArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class TimestampScalar(Scalar):
    value: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class TimestampType(DataType):
    tz: Any = ...
    unit: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def to_pandas_dtype(self) -> Any: ...
    def __reduce__(self) -> Any: ...

class Transcoder:
    def __init__(self, decoder, encoder) -> None: ...
    def __call__(self, buf) -> Any: ...

class TransformInputStream(NativeFile):
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class UInt16Array(IntegerArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class UInt16Scalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class UInt32Array(IntegerArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class UInt32Scalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class UInt64Array(IntegerArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class UInt64Scalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class UInt8Array(IntegerArray):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class UInt8Scalar(Scalar):
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class UnionArray(Array):
    offsets: Any = ...
    type_codes: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def child(self, intpos) -> Any: ...
    def field(self, intpos) -> Any: ...
    def from_dense(self, *args, **kwargs) -> Any: ...
    def from_sparse(self, *args, **kwargs) -> Any: ...

class UnionScalar(Scalar):
    value: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def as_py(self) -> Any: ...

class UnionType(DataType):
    mode: Any = ...
    type_codes: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __getitem__(self, index) -> Any: ...
    def __iter__(self) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...

class UnknownExtensionType(PyExtensionType):
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __arrow_ext_serialize__(self) -> Any: ...

class UnsupportedOperation(OSError, ValueError): ...

class VersionInfo(tuple):
    _asdict: Any = ...
    _field_defaults: Any = ...
    _fields: Any = ...
    _replace: Any = ...
    major: Any = ...
    minor: Any = ...
    patch: Any = ...
    __getnewargs__: Any = ...
    __slots__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(self, *args, **kwargs) -> Any: ...

class WriteStats(importlib._bootstrap.WriteStats):
    __slots__: Any = ...

class _CRecordBatchWriter(_Weakrefable):
    stats: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def close(self) -> Any: ...
    def write(self, table_or_batch) -> Any: ...
    def write_batch(self, RecordBatchbatch) -> Any: ...
    def write_table(self, Tabletable, max_chunksize = ..., **kwargs) -> Any: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ExtensionRegistryNanny(_Weakrefable):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def release_registry(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _HdfsFileNanny(_Weakrefable):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _Metadata(_Weakrefable):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class _PandasAPIShim:
    _array_like_types: Any = ...
    _categorical_type: Any = ...
    _compat_module: Any = ...
    _data_frame: Any = ...
    _datetimetz_type: Any = ...
    _extension_array: Any = ...
    _extension_dtype: Any = ...
    _index: Any = ...
    _is_extension_array_dtype: Any = ...
    _loose_version: Any = ...
    _pd: Any = ...
    _pd024: Any = ...
    _series: Any = ...
    _types_api: Any = ...
    _version: Any = ...
    categorical_type: Any = ...
    compat: Any = ...
    datetimetz_type: Any = ...
    extension_dtype: Any = ...
    has_sparse: Any = ...
    have_pandas: Any = ...
    loose_version: Any = ...
    pd: Any = ...
    version: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def assert_frame_equal(self, *args, **kwargs) -> Any: ...
    def data_frame(self, *args, **kwargs) -> Any: ...
    def get_rangeindex_attribute(self, level, name) -> Any: ...
    def get_values(self, obj) -> Any: ...
    def infer_dtype(self, obj) -> Any: ...
    def is_array_like(self, obj) -> Any: ...
    def is_categorical(self, obj) -> Any: ...
    def is_data_frame(self, obj) -> Any: ...
    def is_datetimetz(self, obj) -> Any: ...
    def is_extension_array_dtype(self, obj) -> Any: ...
    def is_index(self, obj) -> Any: ...
    def is_series(self, obj) -> Any: ...
    def is_sparse(self, obj) -> Any: ...
    def pandas_dtype(self, dtype) -> Any: ...
    def series(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _PandasConvertible(_Weakrefable):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def to_pandas(self, memory_pool = ..., categories = ..., boolstrings_to_categorical = ..., boolzero_copy_only = ..., boolinteger_object_nulls = ..., booldate_as_object = ..., booltimestamp_as_object = ..., booluse_threads = ..., booldeduplicate_objects = ..., boolignore_metadata = ..., boolsafe = ..., boolsplit_blocks = ..., boolself_destruct = ..., types_mapper = ...) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _ReadPandasMixin:
    def read_pandas(self, **options) -> Any: ...

class _ReadStats(tuple):
    _asdict: Any = ...
    _field_defaults: Any = ...
    _fields: Any = ...
    _replace: Any = ...
    num_dictionary_batches: Any = ...
    num_dictionary_deltas: Any = ...
    num_messages: Any = ...
    num_record_batches: Any = ...
    num_replaced_dictionaries: Any = ...
    __getnewargs__: Any = ...
    __slots__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(self, *args, **kwargs) -> Any: ...

class _RecordBatchFileReader(_Weakrefable):
    num_record_batches: Any = ...
    schema: Any = ...
    stats: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _open(self, source, footer_offset = ...) -> Any: ...
    def get_batch(self, inti) -> Any: ...
    def get_record_batch(self, *args, **kwargs) -> Any: ...
    def read_all(self) -> Any: ...
    def read_pandas(self, **options) -> Any: ...
    def __enter__(self) -> Any: ...
    def __exit__(self, exc_type, exc_value, traceback) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _RecordBatchFileWriter(_RecordBatchStreamWriter):
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _open(self, sink, Schemaschema, IpcWriteOptionsoptions = ...) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _RecordBatchStreamReader(RecordBatchReader):
    stats: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _open(self, source) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _RecordBatchStreamWriter(_CRecordBatchWriter):
    _metadata_version: Any = ...
    _use_legacy_format: Any = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def _open(self, sink, Schemaschema, IpcWriteOptionsoptions = ...) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _Weakrefable:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class _WriteStats(tuple):
    _asdict: Any = ...
    _field_defaults: Any = ...
    _fields: Any = ...
    _replace: Any = ...
    num_dictionary_batches: Any = ...
    num_dictionary_deltas: Any = ...
    num_messages: Any = ...
    num_record_batches: Any = ...
    num_replaced_dictionaries: Any = ...
    __getnewargs__: Any = ...
    __slots__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _make(self, *args, **kwargs) -> Any: ...

class ordered_dict:
    __hash__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def copy(self, *args, **kwargs) -> Any: ...
    @classmethod
    def fromkeys(self, *args, **kwargs) -> Any: ...
    def get(self, *args, **kwargs) -> Any: ...
    def items(self, *args, **kwargs) -> Any: ...
    def keys(self, *args, **kwargs) -> Any: ...
    def pop(self, *args, **kwargs) -> Any: ...
    def popitem(self, *args, **kwargs) -> Any: ...
    def setdefault(self, *args, **kwargs) -> Any: ...
    def update(self, *args, **kwargs) -> Any: ...
    def values(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __class_getitem__(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(y) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __ior__(self, other) -> Any: ...
    def __iter__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __reversed__(self) -> Any: ...
    def __ror__(self, other) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...
    def __sizeof__(self) -> Any: ...
